#!/usr/bin/env bash

if [ -e $(dirname $0)/.env ]; then
	source $(dirname $0)/.env
fi

set -xe

mkdir -p dist /dist

OUTPUT_IMG=$1

apt-get	update
apt-get install -y curl dosfstools parted

fdisk -H 255 -S 63 "$OUTPUT_IMG" <<-EOF
o
n
p
1

+128MB
t
c
n
p
2


w
EOF

LOOP_DEV=$(losetup --partscan --show --find "${OUTPUT_IMG}")
BOOT_DEV="$LOOP_DEV"p1
ROOT_DEV="$LOOP_DEV"p2

# format partitions
mkfs.fat -F32 -n ALPINE "$BOOT_DEV"
mkfs.ext4 "$ROOT_DEV"
mkdir -p /alpine
mount --make-private "$ROOT_DEV" /alpine
mkdir -p /alpine/boot
mount --make-private "$BOOT_DEV" /alpine/boot

IMGID="$(dd if="${OUTPUT_IMG}" skip=440 bs=1 count=4 2>/dev/null | xxd -e | cut -f 2 -d' ')"

BOOT_PARTUUID="${IMGID}-01"
ROOT_PARTUUID="${IMGID}-02"

curl https://raw.githubusercontent.com/alpinelinux/alpine-chroot-install/master/alpine-chroot-install | sh

cp -R bootstrap/ /alpine/


if [ -n $CONSOLETTYENABLED  ]; then
	sed -i 's/%CONSOLETTY%/console='${CONSOLETTY},115200'/' /alpine/bootstrap/kernel.sh
	sed -i 's/%BOOTUSERCFG%/enable_uart=1/' /alpine/bootstrap/kernel.sh
else
	sed -i 's/%BOOTUSERCFG%//g' /alpine/bootstrap/kernel.sh
fi

/alpine/enter-chroot /bootstrap/01_software.sh
/alpine/enter-chroot /bootstrap/kernel.sh
/alpine/enter-chroot /bootstrap/system.sh
/alpine/enter-chroot /bootstrap/users.sh
/alpine/enter-chroot /bootstrap/networking.sh
/alpine/enter-chroot /bootstrap/services.sh
/alpine/enter-chroot /bootstrap/first-boot.sh

if [ -n "$CONSOLETTYENABLED"  ]; then
	sed -i 's/#ttyS0::respawn:\/sbin\/getty -L ttyS0 115200 vt100/'${CONSOLETTY}'::respawn:\/sbin\/getty -L '${CONSOLETTY}' 115200 vt100/'  /alpine/etc/inittab
fi

cp /alpine/bootstrap/init/* /alpine/etc/init.d/

rm -rf /alpine/var/lib/apt/lists/*
rm -rf /alpine/var/cache/apk/*
rm -rf /alpine/root/*
rm -rf /alpine/bootstrap/
rm /alpine/enter-chroot
rm /alpine/etc/resolv.conf
rm /alpine/env.sh
find /alpine -iname "*-" -delete
find /alpine -iname "*~" -delete

umount -lf /alpine

# shrink image
ROOT_PART_START=$(parted -ms "$OUTPUT_IMG" unit B print | tail -n 1 | cut -d ':' -f 2 | tr -d 'B')
ROOT_BLOCK_SIZE=$(tune2fs -l "$ROOT_DEV" | grep '^Block size:' | tr -d ' ' | cut -d ':' -f 2)
ROOT_MIN_SIZE=$(resize2fs -P "$ROOT_DEV" | cut -d ':' -f 2 | tr -d ' ')

# shrink fs
e2fsck -f -p "$ROOT_DEV"
resize2fs -p "$ROOT_DEV" $ROOT_MIN_SIZE

# shrink partition
PART_END=$(($ROOT_PART_START + ($ROOT_MIN_SIZE * $ROOT_BLOCK_SIZE)))
parted ---pretend-input-tty "$OUTPUT_IMG" unit B resizepart 2 $PART_END yes

losetup -d "$LOOP_DEV"

if [ -f ${OUTPUT_IMG} ]; then 

	# truncate free space
	FREE_START=$(parted -ms "$OUTPUT_IMG" unit B print free | tail -1 | cut -d ':' -f 2 | tr -d 'B')
	truncate -s $FREE_START "$OUTPUT_IMG"
	gzip -c "$OUTPUT_IMG" > "dist/alpine-rpi-$ALPINE_BRANCH-$ARCH.img.gz"
fi
echo "DONE."
